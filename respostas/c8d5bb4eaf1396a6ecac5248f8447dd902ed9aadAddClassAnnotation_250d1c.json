{
  "prompt_original": "You are a powerful model specialized in refactoring Java code. Code refactoring is  the process of improving the internal structure, readability, and maintainability of a software codebase without altering its external behavior or functionality. Refactor the code below using the following technique: **Add Class Annotation**.\n\nRules:\n- Preserve the original functionality.\n- Return **only the complete refactored code**.\n- Do not include any explanations or comments,. only the code. \n- The code must be enclosed in a valid code block.\n\n### Original Code:\n```java\nindex 3cbe0901cfe..24511a49bbf 100644\n--- a/camel-core/src/main/java/org/apache/camel/CamelContext.java\n+++ b/camel-core/src/main/java/org/apache/camel/CamelContext.java\n      * Whether or not type converters should be loaded lazy\n      *\n      * @return <tt>true</tt> to load lazy, <tt>false</tt> to load on startup\n      */\n     Boolean isLazyLoadTypeConverters();\n \n     /**\n      * Sets whether type converters should be loaded lazy\n      *\n      * @param lazyLoadTypeConverters <tt>true</tt> to load lazy, <tt>false</tt> to load on startup\n      */\n     void setLazyLoadTypeConverters(Boolean lazyLoadTypeConverters);\n \n     /**\n```\n\nRefactored Code:",
  "resposta": "```java\npackage org.apache.camel;\n\nimport java.lang.annotation.*;\n\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface LazyLoadTypeConverters {\n    boolean value() default true;\n}\n\n// Usage in CamelContext class:\npublic class CamelContext {\n    \n    // Whether or not type converters should be loaded lazy\n    @LazyLoadTypeConverters\n    public Boolean isLazyLoadTypeConverters();\n \n    public void setLazyLoadTypeConverters(@LazyLoadTypeConverters boolean lazyLoadTypeConverters);\n    \n}\n```\n"
}