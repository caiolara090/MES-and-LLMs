{
  "prompt_original": "You are a powerful model specialized in refactoring Java code. Code refactoring is  the process of improving the internal structure, readability, and maintainability of a software codebase without altering its external behavior or functionality. Refactor the code below using the following technique: **Extract Method**.\n\nRules:\n- Preserve the original functionality.\n- Return **only the complete refactored code**.\n- Do not include any explanations or comments,. only the code. \n- The code must be enclosed in a valid code block.\n\n### Original Code:\n```java\nindex 4d73792f5ed..e3fe7aa0e0c 100644\n--- a/components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java\n+++ b/components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PrintWriter;\n import java.io.Serializable;\n import java.net.URLDecoder;\n import org.apache.camel.StreamCache;\n import org.apache.camel.component.http4.helper.CamelFileDataSource;\n import org.apache.camel.component.http4.helper.HttpHelper;\n import org.apache.camel.spi.HeaderFilterStrategy;\n import org.apache.camel.util.GZIPHelper;\n import org.apache.camel.util.IOHelper;\n             }\n         }\n     }\n \n     protected void doWriteDirectResponse(Message message, HttpServletResponse response, Exchange exchange) throws IOException {\n         // if content type is serialized Java object, then serialize and write it to the response\n         }\n \n         // prefer streaming\n        InputStream is;\n         if (checkChunked(message, exchange)) {\n             is = message.getBody(InputStream.class);\n         } else {\n            // try to use input stream first, so we can copy directly\n            is = exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, message.getBody());\n         }\n \n         if (is != null) {\n             ServletOutputStream os = response.getOutputStream();\n            try {\n                LOG.trace(\"Writing direct response from source input stream to servlet output stream\");\n                // copy directly from input stream to output stream\n                IOHelper.copy(is, os);\n            } finally {\n                IOHelper.close(os, is);\n             }\n         } else {\n             // not convertable as a stream so try as a String\n```\n\nRefactored Code:",
  "resposta": "Here's the refactored code after applying the **Extract Method** technique:\n\n```java\nindex 4d73792f5ed..e3fe7aa0e0c 100644\n--- a/components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java\n+++ b/components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PrintWriter;\n import java.io.Serializable;\n import java.net.URLDecoder;\n import org.apache.camel.StreamCache;\n import org.apache.camel.component.http4.helper.CamelFileDataSource;\n import org.apache.camel.component.http4.helper.HttpHelper;\n import org.apache.camel.spi.HeaderFilterStrategy;\n import org.apache.camel.util.GZIPHelper;\n import org.apache.camel.util.IOHelper;\n\n  protected void doWriteDirectResponse(Message message, HttpServletResponse response, Exchange exchange) throws IOException {\n      // if content type is serialized Java object, then serialize and write it to the response\n      \n      writeFromInputStreamToOutputStream(message, exchange, response);\n }\n  \n private void writeFromInputStreamToOutputStream(Message message, Exchange exchange, HttpServletResponse response){\n         InputStream is = getInputSteam(message, exchange);\n         \n        if (is != null)  {\n             ServletOutputStream os = response.getOutputStream();\n            try  {\n                LOG.trace(\"Writing direct response from source input stream to servlet output stream\");\n                 // copy directly from input stream to output stream\n                IOHelper.copy(is, os);\n             } finally  {\n                IOHelper.close(os, is);\n              }\n          } else {\n              // not convertable as a stream so try as a String\n}\n          \n private InputStream getInputSteam(Message message, Exchange exchange){\n         InputStream is;\n         if (checkChunked(message, exchange))  {\n             is = message.getBody(InputStream.class);\n          } else  {\n            // try to use input stream first, so we can copy directly\n            is = exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, message.getBody());\n          }\n        return is;\n     }\n```\n"
}