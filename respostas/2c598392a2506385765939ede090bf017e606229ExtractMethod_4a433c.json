{
  "prompt_original": "\nRefatore o código abaixo aplicando a seguinte técnica: **Extract Method**.\n\nRegras:\n- Mantenha a funcionalidade original.\n- Retorne **apenas o código completo**.\n- Não inclua explicações ou comentários.\n- O código deve estar delimitado em blocos de código válidos.\n\n### Código original:\n```java\nindex 1a619f2dd4b..834dbb73b89 100644\n--- a/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintTestSupport.java\n+++ b/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintTestSupport.java\n import org.apache.camel.model.ModelCamelContext;\n import org.apache.camel.test.junit4.CamelTestSupport;\n import org.junit.After;\n import org.junit.Before;\n import org.osgi.framework.BundleContext;\n import org.osgi.service.blueprint.container.BlueprintContainer;\n  * Base class for OSGi Blueprint unit tests with Camel.\n  */\n public abstract class CamelBlueprintTestSupport extends CamelTestSupport {\n\n    private BundleContext bundleContext;\n\n    @Before\n    @Override\n    public void setUp() throws Exception {\n         String symbolicName = getClass().getSimpleName();\n        this.bundleContext = CamelBlueprintHelper.createBundleContext(symbolicName, getBlueprintDescriptor(),\n                 true, getBundleFilter(), getBundleVersion(), getBundleDirectives());\n \n         // must register override properties early in OSGi containers\n         Properties extra = useOverridePropertiesWithPropertiesComponent();\n         if (extra != null) {\n            bundleContext.registerService(PropertiesComponent.OVERRIDE_PROPERTIES, extra, null);\n         }\n \n         // must reuse props as we can do both load from .cfg file and override afterwards\n                 props.put(key, value);\n             }\n \n            ConfigurationAdmin configAdmin = getOsgiService(ConfigurationAdmin.class);\n             if (configAdmin != null) {\n                 // ensure we update\n                 Configuration config = configAdmin.getConfiguration(pid);\n         // allow end user to override properties\n         String pid = useOverridePropertiesWithConfigAdmin(props);\n         if (pid != null) {\n            ConfigurationAdmin configAdmin = getOsgiService(ConfigurationAdmin.class);\n             Configuration config = configAdmin.getConfiguration(pid);\n             if (config == null) {\n                 throw new IllegalArgumentException(\"Cannot find configuration with pid \" + pid + \" in OSGi ConfigurationAdmin service.\");\n             log.info(\"Updating ConfigAdmin {} by overriding properties {}\", config, props);\n             config.update(props);\n         }\n \n        super.setUp();\n \n         // must wait for blueprint container to be published then the namespace parser is complete and we are ready for testing\n         log.debug(\"Waiting for BlueprintContainer to be published with symbolicName: {}\", symbolicName);\n         getOsgiService(BlueprintContainer.class, \"(osgi.blueprint.container.symbolicname=\" + symbolicName + \")\");\n     @Override\n     public void tearDown() throws Exception {\n         super.tearDown();\n         CamelBlueprintHelper.disposeBundleContext(bundleContext);\n     }\n \n     /**\n      * Return the system bundle context\n         context = (ModelCamelContext) answer;\n         return answer;\n     }\n \n     protected <T> T getOsgiService(Class<T> type) {\n         return CamelBlueprintHelper.getOsgiService(bundleContext, type);\n```\n\nCódigo refatorado:",
  "resposta": "```java\nimport org.apache.camel.model.ModelCamelContext;\nimport org.apache.camel.test.junit4.CamelTestSupport;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.osgi.framework.BundleContext;\nimport org.osgi.service.blueprint.container.BlueprintContainer;\n\npublic abstract class CamelBlueprintTestSupport extends CamelTestSupport {\n    private BundleContext bundleContext;\n    \n    @Override\n    public void setUp() throws Exception {\n        String symbolicName = getClass().getSimpleName();\n        this.bundleContext = createBundleContext(symbolicName, getBlueprintDescriptor(), true, \n                                                 getBundleFilter(), getBundleVersion(), getBundleDirectives());\n        \n        registerOverridePropertiesServiceIfExists();\n        updateConfigAdminWithOverridesIfExists();\n        \n        super.setUp();\n        \n        waitForBlueprintContainerPublish(symbolicName);\n    }\n    \n    private BundleContext createBundleContext(String symbolicName, String blueprintDescriptor, boolean bundleActive, \n                                              String bundleFilter, String bundleVersion, String bundleDirectives) {\n        return CamelBlueprintHelper.createBundleContext(symbolicName, blueprintDescriptor, \n                                                         bundleActive, bundleFilter, bundleVersion, bundleDirectives);\n    }\n    \n    private void registerOverridePropertiesServiceIfExists() {\n        Properties extra = useOverridePropertiesWithPropertiesComponent();\n        \n        if (extra != null) {\n            bundleContext.registerService(PropertiesComponent.OVERRIDE_PROPERTIES, extra, null);\n        }\n    }\n    \n    private void updateConfigAdminWithOverridesIfExists() {\n        Properties props = new Properties();\n        // Add properties here...\n        \n        ConfigurationAdmin configAdmin = getOsgiService(ConfigurationAdmin.class);\n        \n        if (configAdmin != null) {\n            String pid = useOverridePropertiesWithConfigAdmin(props);\n            \n            if (pid != null) {\n                Configuration config = configAdmin.getConfiguration(pid);\n                \n                if (config == null) {\n                    throw new IllegalArgumentException(\"Cannot find configuration with pid \" + pid + \n                                                       \" in OSGi ConfigurationAdmin service.\");\n                }\n                \n                log.info(\"Updating ConfigAdmin {} by overriding properties {}\", config, props);\n                config.update(props);\n            }\n        }\n    }\n    \n    private void waitForBlueprintContainerPublish(String symbolicName) {\n        log.debug(\"Waiting for BlueprintContainer to be published with symbolicName: {}\", symbolicName);\n        \n        getOsgiService(BlueprintContainer.class, \"(osgi.blueprint.container.symbolicname=\" + symbolicName + \")\");\n    }\n    \n    @Override\n    public void tearDown() throws Exception {\n        super.tearDown();\n        CamelBlueprintHelper.disposeBundleContext(bundleContext);\n    }\n}\n```\n"
}